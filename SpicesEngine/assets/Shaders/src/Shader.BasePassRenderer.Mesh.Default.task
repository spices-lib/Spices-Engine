/**
* @file Shader.BasePassRenderer.Mesh.Default.task.
* @brief This Shader Defines BasePass Renderer Mesh SubPass Default Task Shader Behaver.
* @author Spices.
*/

/************************************Pre Compile*******************************************/

#version 460
#extension GL_EXT_mesh_shader                        : require  /* @brief Declear this as task shader. */
#extension GL_GOOGLE_include_directive               : enable   /* @brief Enable include feature.      */
#extension GL_KHR_shader_subgroup_ballot             : enable   /* @brief Enable subgroup feature.     */

#include "Header/ShaderCommon.h"
#include "Header/ShaderPreRendererLayout.glsl"
#include "Header/ShaderFunctionLibrary.glsl"

/*****************************************************************************************/

/*************************************Task Input******************************************/

/**
* Subgroup size only support 32 in nvidia / 64 in amd.
*/
layout (local_size_x = SUBGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

/*****************************************************************************************/

/*************************************Task Output*****************************************/

/**
* @brief task padload send to mesh shader.
*/
taskPayloadSharedEXT struct Task 
{
    uint meshletIndex[SUBGROUP_SIZE];        /* @brief mesh shader hanled meshlet id. */
} 
task;

/*****************************************************************************************/

/*********************************Push Constant*******************************************/

/**
* @brief push constant.
*/
layout(push_constant) uniform Push 
{
    MeshDesc desc;                           /* @see MeshDesc. */
};

/*****************************************************************************************/

/************************************Specific Data****************************************/

layout(buffer_reference, scalar, buffer_reference_align = 8) buffer Model
{
    mat4 i[];
};

layout(buffer_reference, scalar, buffer_reference_align = 8) buffer Meshlets 
{
    Meshlet i[];
};

/*****************************************************************************************/

/******************************************Functions**************************************/

/**
* @brief Get Shader Global linear invocate Index.
* @return Returns the Shader Global linear invocate Index.
*/
uint glGlobalInvocationIndex();

/*****************************************************************************************/

/**********************************Shader Entry*******************************************/

void main()
{
    uint meshletIndex = glGlobalInvocationIndex();

    /**
    * @brief cull if reach meshlets count.
    */
    bool cull = meshletIndex >= desc.nMeshlets;

    if(!cull)
    {
        Meshlet meshlet     = Meshlets(desc.meshletAddress).i[meshletIndex];
        mat4 model          = Model(desc.modelAddredd).i[0];
        mat4 mvp            = view.projection * view.view * model;
        
        vec4 ro             = view.inView * vec4(0.0f, 0.0f, 0.0f, 1.0f);
        vec4 worldCenter    = model * vec4(meshlet.boundCenter, 1.0f);
        vec3 dis            = worldCenter.xyz - ro.xyz;

        /**
        * @brief cull by view frustum.
        */
        vec4 frustumPlanes[5];
        ExtractFrustumPlanes(mvp, frustumPlanes);
        bool frustumCulled = !IsInsideFrustum_Sphere(frustumPlanes, meshlet.boundCenter, meshlet.boundRadius);
        
        /**
        * @brief cull by cone normal.
        */
        vec4 modelRo = inverse(view.view * model)[3];
        bool normalConeCulled = IsConeBackfacing(meshlet.coneApex, -meshlet.coneAxis, meshlet.coneCutoff, modelRo.xyz);

        if(frustumCulled || normalConeCulled) cull = true;
    }

    /**
    * @brief subgroup operation.
    */
    uvec4 ballot = subgroupBallot(!cull);
    uint passedMeshletIndex = subgroupBallotExclusiveBitCount(ballot);
    uint passedMeshletCount = subgroupBallotBitCount(ballot);

    if(!cull)
    {
        task.meshletIndex[passedMeshletIndex] = meshletIndex;
    }

    EmitMeshTasksEXT(passedMeshletCount, 1, 1);
}

/*****************************************************************************************/

uint glGlobalInvocationIndex()
{
	uint linear = gl_WorkGroupID.z * gl_NumWorkGroups.x * gl_NumWorkGroups.y +
	gl_WorkGroupID.y * gl_NumWorkGroups.x +
	gl_WorkGroupID.x;

	return gl_LocalInvocationIndex + linear * (gl_WorkGroupSize.x * gl_WorkGroupSize.y * gl_WorkGroupSize.z);
}