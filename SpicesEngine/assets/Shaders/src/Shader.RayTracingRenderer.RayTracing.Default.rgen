/**
* @file Shader.RayTracingRenderer.RayTracing.Default.rgen.
* @brief This Shader Defines RayTracing Renderer RayTracing SubPass Default Ray Generation Shader Behaver.
* @author Spices.
*/

/************************************Pre Compile******************************************/

#version 460

#extension GL_GOOGLE_include_directive   : enable    /* @brief Enable include Macro.       */
#extension GL_EXT_ray_tracing            : require   /* @brief Enable Ray Tracing Shader.  */
#extension GL_ARB_shader_clock           : enable    /* @brief Enable Shader Clock Access. */

#include "Header/ShaderPreRendererLayout.glsl"
#include "Header/ShaderFunctionLibrary.glsl"

/****************************************************************************************/

/************************************Rgen Input OutPut***********************************/

/**
* @brief Ray trace payloads.
*/
layout(location = 0) rayPayloadEXT HitPayLoad prd;

/*****************************************************************************************/

/********************************Specific Renderer Data***********************************/

/**
* @brief Acceleration Structure.
*/
layout(set = 2, binding = 0) uniform accelerationStructureEXT topLevelAS;

/**
* @brief Ray Tracing Out Image.
*/
layout(set = 2, binding = 1, rgba32f) uniform image2D RayImage;    /* @brief Color. */
layout(set = 2, binding = 2, r32f) uniform image2D RayID;          /* @brief ID.    */

/*****************************************************************************************/

/**********************************Shader Entry*******************************************/

void main() 
{
    /**
    * @brief Init HitPayLoad Data.
    */
    prd.seed                = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, int(clockARB()));
    prd.hitValue            = vec3(0.0f);
    prd.rayDepth            = 0;
    prd.weight              = vec3(0.0f);
    
    /**
    * @brief Calculate Screen Direction.
    */
    const vec2 pixelCenter  = vec2(gl_LaunchIDEXT.xy) + vec2(0.5f);
    const vec2 inUV         = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2  d                 = inUV * 2.0 - 1.0;
    
    /**
    * @brief Calculate Screen World Direction.
    */
    vec4 origin             = view.inView * vec4(0.0f, 0.0f, 0.0f, 1.0f);
    vec4 target             = inverse(view.nprojection) * vec4(d.x, d.y, 1.0f, 1.0f);
    vec4 direction          = view.inView * vec4(normalize(target.xyz), 0.0f);

    prd.rayOrigin           = origin.xyz;
    prd.rayDirection        = direction.xyz;
    
    uint  rayFlags          = gl_RayFlagsOpaqueEXT;
    uint  cullMask          = 0xFF;
    float tMin              = 0.001f;
    float tMax              = 10000.0f;
    
    vec3 curWeight          = vec3(1.0f);
    vec3 hitValue           = vec3(0.0f);
    int  maxRayDepth        = 0;
    uint  entityID          = 0;
    
    /**
    * @brief First Entry.
    */
    traceRayEXT(topLevelAS,        /* @brief Acceleration Structure.         */
                rayFlags,          /* @brief RayFlags.                       */
                cullMask,          /* @brief CullMask.                       */
                0,                 /* @brief SBTRecordOffset.                */
                0,                 /* @brief SBTRecordStride.                */
                0,                 /* @brief Miss Shader Index.              */
                prd.rayOrigin,     /* @brief Ray Origin.                     */
                tMin,              /* @brief Ray min range.                  */
                prd.rayDirection,  /* @brief Ray Direction.                  */
                tMax,              /* @brief Ray max range.                  */
                0                  /* @brief rayPayloadEXT (location = 0).   */
    );

    hitValue    += prd.hitValue * curWeight;
    curWeight   *= prd.weight;
    maxRayDepth  = prd.maxRayDepth;
    entityID     = prd.entityID;
    
    /**
    * @brief Recursive Ray by hit material ateribute.
    */
    for(; prd.rayDepth < maxRayDepth; prd.rayDepth++)
    {
        traceRayEXT(topLevelAS,        /* @brief Acceleration Structure.         */
                    rayFlags,          /* @brief RayFlags.                       */
                    cullMask,          /* @brief CullMask.                       */
                    0,                 /* @brief SBTRecordOffset.                */
                    0,                 /* @brief SBTRecordStride.                */
                    0,                 /* @brief Miss Shader Index.              */
                    prd.rayOrigin,     /* @brief Ray Origin.                     */
                    tMin,              /* @brief Ray min range.                  */
                    prd.rayDirection,  /* @brief Ray Direction.                  */
                    tMax,              /* @brief Ray max range.                  */
                    0                  /* @brief rayPayloadEXT (location = 0).   */
        );

        hitValue  += prd.hitValue * curWeight;
        curWeight *= prd.weight;
    }

    /**
    * @brief Do accumulation over time.
    */
    if(view.stableFrames > 0)
    {
        float a         = 1.0f / float(view.stableFrames + 1);
        vec3  old_color = imageLoad(RayImage, ivec2(gl_LaunchIDEXT.xy)).xyz;
        imageStore(RayImage, ivec2(gl_LaunchIDEXT.xy), vec4(mix(old_color, hitValue, a), 1.0f));
    }
    else
    {
        /**
        * @brief First frame, replace the value in the buffer.
        */ 
        imageStore(RayImage, ivec2(gl_LaunchIDEXT.xy), vec4(hitValue, 1.0f));
    }
    imageStore(RayID, ivec2(gl_LaunchIDEXT.xy), vec4(entityID));
}

/*****************************************************************************************/