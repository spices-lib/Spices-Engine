/**
* @file Shader.BasePassRenderer.Mesh.Default.mesh.
* @brief This Shader Defines BasePass Renderer Mesh SubPass Default Mesh Shader Behaver.
* @author Spices.
*/

/************************************Pre Compile*******************************************/

#version 460
#extension GL_EXT_mesh_shader                 : require
#extension GL_GOOGLE_include_directive        : enable    
#extension GL_EXT_control_flow_attributes     : require

#include "Header/ShaderPreRendererLayout.glsl"

/*****************************************************************************************/

/*************************************Mesh Input******************************************/

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

/*****************************************************************************************/

/*************************************Mesh Output*****************************************/

layout(triangles, max_vertices = MESHLUTNVERTICES, max_primitives = MESHLUTNPRIMITIVES) out;

layout(location = 0) out struct VertOut {
    vec3 position;                                
    vec3 normal;                                  
    vec3 color;                                   
    vec2 texCoord;
} vertOut[];

layout(location = 4) out uint meshlutId[];

/*****************************************************************************************/

/*********************************Push Constant*******************************************/

/**
* @brief push constant.
*/
layout(push_constant) uniform Push {
	PushConstantMesh push;   
};

/*****************************************************************************************/


layout(buffer_reference, scalar, buffer_reference_align = 8) buffer Vertices { 
    Vertex v[];           
};

layout(buffer_reference, scalar, buffer_reference_align = 8) buffer Indices { 
    ivec3 i[]; 
};

layout(buffer_reference, scalar, buffer_reference_align = 8) buffer Meshluts {
    Meshlut i[];
};

/**********************************Shader Entry*******************************************/

void main()
{
    uint id = gl_WorkGroupID.x;
    
    Vertices vertices   = Vertices(push.desc.vertexAddress);
    Indices indices     = Indices(push.desc.indexAddress);
    Meshlut meshlut     = Meshluts(push.desc.meshlutAddress).i[id];
    
    mat4 mvp = view.projection * view.view * push.model;
    mat3 m3model = mat3(transpose(inverse(push.model)));

    [[unroll]]
    for(uint i = 0; i < meshlut.nVertices; i++)
    {
        Vertex vt = vertices.v[meshlut.vertexIndex + i];

        gl_MeshVerticesEXT[i].gl_Position = mvp * vec4(vt.position, 1.0f);

        vertOut[i].position = vec3(push.model * vec4(vt.position, 1.0f));
        vertOut[i].normal   = normalize(m3model * vt.normal);
        vertOut[i].color    = vt.color;
        vertOut[i].texCoord = vt.texCoord;
        meshlutId[i]        = id;
    }

	[[unroll]]
    for(uint i = 0; i < meshlut.nPrimitives; i++)
    {
        ivec3 index = indices.i[meshlut.primitiveIndex + i];
        index -= ivec3(meshlut.primitiveIndex);
        gl_PrimitiveTriangleIndicesEXT[i] =  uvec3(index.x, index.y, index.z);
    }
    
    SetMeshOutputsEXT(meshlut.nVertices, meshlut.nPrimitives);
}

/*****************************************************************************************/