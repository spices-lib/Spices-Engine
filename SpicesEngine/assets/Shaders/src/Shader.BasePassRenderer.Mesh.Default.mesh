/**
* @file Shader.BasePassRenderer.Mesh.Default.mesh.
* @brief This Shader Defines BasePass Renderer Mesh SubPass Default Mesh Shader Behaver.
* @author Spices.
*/

/************************************Pre Compile*******************************************/

#version 460
#extension GL_EXT_mesh_shader                 : require   /* @brief Declear this as mesh shader. */
#extension GL_GOOGLE_include_directive        : enable    /* @brief Enable include feature.      */
#extension GL_EXT_control_flow_attributes     : require   /* @brief Enable flow butter control.  */

#include "Header/ShaderPreRendererLayout.glsl"
#include "Header/ShaderMeshDescLayout.glsl"

/*****************************************************************************************/

/*************************************Mesh Input******************************************/

/**
* @brief 128(Local Work Groups Count) ~ 126(Nvidia Recommended Meshlet Primitives) ~ 124(MeshOptimizer Required Meshlet Primitives)
* But subgroup size only support 32 in nvidia / 64 in amd.
* Thereforce use iter to reach all primitives in meshlet.
*/
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

/**
* @brief task padload receive from task shader.
*/
taskPayloadSharedEXT struct Task 
{
    uint meshletIndex[SUBGROUP_SIZE];    /* @brief mesh shader hanled meshlet id. */
}
task;    

/*****************************************************************************************/

/*************************************Mesh Output*****************************************/

/**
* @brief Output triangles meshlet per workgroup.
*/
layout(triangles, max_vertices = MESHLET_NVERTICES * 3, max_primitives = MESHLET_NPRIMITIVES) out;

/**
* @brief Mesh Shader Output to Fragment Shader.
*/
layout(location = 0) out Pixel pixel[];               /* @brief Pixel Data.     */
layout(location = 4) out flat uint triangleId[];      /* @brief Triangle ID.    */
layout(location = 5) out flat uint meshletId[];       /* @brief Meshlet ID.     */

/*****************************************************************************************/

/*********************************Push Constant*******************************************/

/**
* @brief push constant.
*/
layout(push_constant) uniform Push 
{
    uint64_t descAddress;   
} 
push;

/*****************************************************************************************/

/**********************************Shader Entry*******************************************/

void main()
{
    uint id = task.meshletIndex[gl_WorkGroupID.x];
    ExplainMeshDesciption(push.descAddress);
    
    Meshlet meshlet     = meshlets.i[id];
    
    mat4 mvp = view.projection * view.view * model;
    mat3 m3model = mat3(transpose(inverse(model)));

    const uint localId = gl_LocalInvocationIndex;
        
    if(localId >= meshlet.nPrimitives) return;
    
    uvec3 primLocation = primitiveLocations.i[meshlet.primitiveOffset + localId];

    primLocation -= ivec3(meshlet.vertexOffset);
    uint arrayIndices[3] = { primLocation.x, primLocation.y, primLocation.z };
       
    gl_PrimitiveTriangleIndicesEXT[localId] =  uvec3(primLocation.x, primLocation.y, primLocation.z);

    Vertex[3] vts = UnpackVertexFromPrimitiveVertices(meshlet.primitiveOffset + localId);

    [[unroll]]
    for(int j = 0; j < 3; j++)
    {   
        Vertex vt = vts[j];

        gl_MeshVerticesEXT[arrayIndices[j]].gl_Position = mvp * vec4(vt.position, 1.0f);
        
        pixel[arrayIndices[j]].position  = vec3(model * vec4(vt.position, 1.0f));
        pixel[arrayIndices[j]].normal    = normalize(m3model * vt.normal);
        pixel[arrayIndices[j]].color     = vt.color;
        pixel[arrayIndices[j]].texCoord  = vt.texCoord;
        triangleId[arrayIndices[j]]      = localId + meshlet.primitiveOffset;
        meshletId[arrayIndices[j]]       = id;
    }
    
    SetMeshOutputsEXT(meshlet.nVertices, meshlet.nPrimitives);
}

/*****************************************************************************************/