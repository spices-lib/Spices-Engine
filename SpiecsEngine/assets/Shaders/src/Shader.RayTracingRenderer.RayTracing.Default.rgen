/**
* @file Shader.RayTracingRenderer.RayTracing.Default.rgen.
* @brief This Shader Defines RayTracing Renderer RayTracing SubPass Default Ray Generation Shader Behaver.
* @author Spiecs.
*/

/************************************Pre Compile*******************************************/

#version 460

#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_ray_tracing : require

#include "Header/ShaderLayouts.glsl"

/****************************************************************************************/

/***************************************Rgen Input***************************************/

/**
* @brief Input from Hit/Miss Shader CallBack.
*/
layout(location = 0) rayPayloadEXT HitPayLoad prd;

/*****************************************************************************************/

/********************************Specific Renderer Data***********************************/

layout(set = 1, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 1, binding = 1, rgba32f) uniform image2D image;

/*****************************************************************************************/

/**********************************Shader Entry*******************************************/

void main() 
{
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5f);
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;
    
    vec4 origin    = view.inView * vec4(0.0f, 0.0f, 0.0f, 1.0f);
    vec4 target    = inverse(view.nprojection) * vec4(d.x, d.y, 1.0f, 1.0f);
    vec4 direction = view.inView * vec4(normalize(target.xyz), 0.0f);

    uint rayFlags = gl_RayFlagsOpaqueEXT;
    uint cullMask = 0xff;
    float tMin = 0.001f;
    float tMax = 10000.0f;

    prd.hitValue      = vec3(0.0f);
    prd.seed          = 0.0f;
    prd.depth         = 0;
    prd.rayOrigin     = origin.xyz;
    prd.rayDirection  = direction.xyz;
    prd.weight        = vec3(0.0f);
    
    vec3 curWeight = vec3(1.0f);
    vec3 hitValue = vec3(0.0f);
    
    //for(; prd.depth < 10; prd.depth++)
    {
        traceRayEXT(topLevelAS,        // acceleration structure
                    rayFlags,          // rayFlags
                    cullMask,          // cullMask
                    0,                 // sbtRecordOffset
                    0,                 // sbtRecordStride
                    0,                 // missIndex
                    prd.rayOrigin,     // ray origin
                    tMin,              // ray min range
                    prd.rayDirection,  // ray direction
                    tMax,              // ray max range
                    0                  // payload (location = 0)
        );

        hitValue += prd.hitValue * curWeight;
        curWeight *= prd.weight;
    }

    // Do accumulation over time
    vec3 old_color = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(mix(old_color, hitValue, 0.5f), 1.0f));
}

/*****************************************************************************************/